Fichier de test pour l'analyseur d'expressions du compilateur de templates.

Expressions de bases : entiers, booléens, etc.

@version : $Id: Expressions.base.testfile 328 2007-04-17 11:02:42Z dmenard $

================================================================================
--test--
hhhh
--file-- 
true
--expect--
true
================================================================================
--file-- 
false
--expect--
false
================================================================================
--file-- 
!true
--expect--
false
================================================================================
--file-- 
!false
--expect--
true
================================================================================
--file-- 
!!false
--expect--
false
================================================================================
--file-- 
(!true)
--expect--
false
================================================================================
--file-- 
true or false;
--expect--
true
================================================================================
--file-- 
5 or !6
--expect--
true
================================================================================
--file-- 
6 || !6
--expect--
true
================================================================================
--file-- 
5 and !6
--expect--
false
================================================================================
--file-- 
6 && !6
--expect--
false
================================================================================
--file-- 
(int)(5/2)
--expect--
2
================================================================================
--file-- 
(int)('5'/2)
--expect--
2
================================================================================
--file-- 
(int)("5"/2)
--expect--
2
================================================================================
--file-- 
0+1+2+4+8
--expect--
15
================================================================================
--file-- 
(0+(1+(2+4)+8))
--expect--
15
================================================================================
--file-- 
3.14*2*2.0
--expect--
12.56
================================================================================
--file-- 
5 * NULL
--expect--
0
================================================================================
--file-- 
5 * ''
--expect--
0
================================================================================
--file-- 
5 * ' '
--expect--
0
================================================================================
--file-- 
(2^4)%5
--expect--
1
================================================================================
--file-- 
2<<((2<<4)>>3)
--expect--
32
================================================================================
--file-- 
("1"==10 or (1+1)==2) && (2*5-4)==6
--expect--
true
================================================================================
--file-- 
'a string'
--expect--
'a string'
================================================================================
--file-- 
"a string"
--expect--
'a string'
================================================================================
--file-- 
'a'.' very'." long".(' '.'string'.''.'')
--expect--
'a very long string'
================================================================================
================================================================================
--file-- 
true ? 'a' : 'b'
--expect--
'a'
================================================================================
--file-- 
false ? 'a' : 'b'
--expect--
'b'
================================================================================
================================================================================
--file-- 
true ? true ? 'a' : 'b' : 'c'
--comment--
evalué de gauche à droite, donc équivalent à true ? (true ? 'a' : 'b') : 'c'
--expect--
'a'
================================================================================
--file-- 
true ? false ? 'a' : 'b' : 'c'
--comment--
evalué de gauche à droite, donc équivalent à true ? (false ? 'a' : 'b') : 'c'
--expect--
'b'
================================================================================
--file-- 
false ? true ? 'a' : 'b' : 'c'
--comment--
evalué de gauche à droite, donc équivalent à false ? (true ? 'a' : 'b') : 'c'
--expect--
'c'
================================================================================
--file-- 
false ? false ? 'a' : 'b' : 'c'
--comment--
evalué de gauche à droite, donc équivalent à false ? (false ? 'a' : 'b') : 'c'
--expect--
'c'
================================================================================
================================================================================
--file-- 
true ? 'a' : 'b' ? 'c' : 'd'
--comment--
evalué de gauche à droite, donc équivalent à (true ? 'a' : 'b') ? 'c' : 'd'
--expect--
'c'
================================================================================
--file-- 
false ? 'a' : 'b' ? 'c' : 'd'
--comment--
evalué de gauche à droite, donc équivalent à (false ? 'a' : 'b') ? 'c' : 'd'
--expect--
'c'
