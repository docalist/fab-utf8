Fichier de test pour l'analyseur d'expressions du compilateur de templates.

@version : $Id: Expressions.testfile 328 2007-04-17 11:02:42Z dmenard $

================================================================================
--file-- 
(int)('5$i'/2)
--expect--
2
--comment--
1. $i ressemble à une variable, mais comme la chaine n'utilise pas de guillemets 
doubles, elle n'est pas interprétée. 
2. '5$i' est casté en entier, ce qui donne 2, d'où le résultat : 2
================================================================================
--file-- 
(int)("5$i"/2)
--expect--
(int)("5$i"/2)
================================================================================
--file-- 
0+1+2+4+8+$x
--expect--
0+1+2+4+8+$x
================================================================================
--file-- 
PHP_INT_MAX // constante php pré-définie
--expect--
2147483647
================================================================================
--file-- 
PHP_OS_NEW // constante inexistante
--expect--
PHP_OS_NEW
================================================================================
--file-- 
$h
--expect--
$h
================================================================================
--file-- 
'$h'
--expect--
'$h'
================================================================================
--file-- 
"$h"
--expect--
$h
--skip--
actuellement, retourne "$h" et non pas $h.
Ce qui n'est pas faux, mais l'expression pourrait être optimisée.
================================================================================
--file-- 
-$x
--expect--
-$x
================================================================================
--file-- 
$x+$y
--expect--
$x+$y
================================================================================
--file-- 
"variable $h dans une chaine"
--expect--
"variable $h dans une chaine"
================================================================================
--file-- 
{"variable {$h[0]} dans une chaine"}
--expect--
{"variable {$h[0]} dans une chaine"}
================================================================================
--file-- 
"le label" !== $$name
--expect--
'le label' !== $$name
================================================================================
--file-- 
$record[ref] !== 0'
--expect--
$record[ref] !== 0'
================================================================================
--file-- 
$$nomVar
--expect--
$$nomVar
================================================================================
--file-- 
$this->equation
--expect--
$this->equation
================================================================================
--file-- 
"le $first {$first} label" !== ''
--expect--
"le $first {$first} label" !== ''
================================================================================
--file-- 
__FILE__
--expect--

--skip--
Actuellement, c'est interdit dans une expression. Voir s'il faut gérer.
================================================================================
--file-- 
$x && $x && $x && $x && $x && $x && $x && $x && $x
--expect--
$x&&$x&&$x&&$x&&$x&&$x&&$x&&$x&&$x
================================================================================
--file-- 
$x || $x
--expect--
$x||$x
================================================================================
