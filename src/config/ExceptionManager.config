<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<config>

    <!-- 
        <exceptions> : permet de définir le comportement à apporter lorsqu'une
        exception est générée.
        
        Pour chaque type d'exception, on peut indiquer le template à utiliser
        pour afficher l'exception à l'utilisateur et, de optionnellement, une 
        action supplémentaire à exécuter (il doit s'agir d'une méthode du
        module ExceptionManager en cours prenant en paramètre l'exception
        obtenue). 
        
        Chaque item de l'entrée <exceptions> porte le nom d'un type d'exception 
        donné (<Exception>, <LogicException>, <InvalidArgumentException>...) et 
        peut contenir soit une chaine (dans ce cas c'est le nom du template à 
        utiliser) soit des tages <template> et <action>.
        
        Lorsqu'une action est traitée, le partir de la classe de l'exception
        obtenue (par exemple InvalidArgumentException) puis va remonter la 
        liste des classes ancêtres (LogicException puis Exception dans notre 
        exemple).  
     -->
    <exceptions>
        <Exception>
            <template>Exception.html</template>
            <nuaction>mail</nuaction>
        </Exception>
        
<!--         
            <LogicException>
                <template>LogicException.html</template>
                <action>mailAdmin</action>
            </LogicException>
 -->
                <InvalidArgumentException>
                    <template>InvalidArgumentException.html</template>
                    <action>none</action>
                </InvalidArgumentException>
    </exceptions>
    
    <!-- 
        Action 'mail' : envoie un récapitulatif de l'exception aux destinataires
        indiqués.  
    -->
    <mail>
        <template>mail.html</template>
        <recipients>
            <item>daniel.menard@bdsp.tm.fr</item>
            <item>severine.ferron@bdsp.tm.fr</item>
        </recipients>
    </mail>
</config>